stackql:
  startupSQLScripts:
    01-setup-stackql.sql: |
      registry pull google; 
      registry pull github; 
      registry pull azure; 
      registry pull digitalocean; 
      registry pull okta; 
      registry pull aws; 
      registry pull k8s;
      registry pull googleadmin;
      CREATE OR REPLACE VIEW cross_cloud_vms AS 
      select 
      'google' as cloud,
      name, 
      split_part(split_part(machineType, '/', 11), '-', 2) as type, 
      json_extract_path_text(json_extract_path_text(networkInterfaces, '0'), 'networkIP') as ipAddress
      from google.compute.instances 
      where project = 'stackql-demo'
      UNION ALL
      select
      'aws' as cloud,
      instanceId as name, 
      split_part(instanceType, '.', 2) as type, 
      case when ipAddress is null then privateIpAddress else ipAddress end as ipAddress 
      from aws.ec2.instances 
      where region = 'ap-southeast-2' 
      ;
      create view org_celeb_contributors as
      select login, contributions, 'go-openapistackql' as repository  FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'go-openapistackql'
      UNION ALL
      select login, contributions, 'stackql' as repository FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'stackql'
      UNION ALL
      select login, contributions, 'stackql-provider-registry' as repository  FROM github.repos.contributors WHERE owner = 'stackql' AND repo = 'stackql-provider-registry'
      ;
      create view google_subnet_locations as
      select
      name,
      region,
      CASE 
        WHEN region LIKE '%asia-northeast1%' THEN 'Japan'
        WHEN region LIKE '%asia-northeast2%' THEN 'Japan'
        WHEN region LIKE '%asia-northeast3%' THEN 'South Korea'
        WHEN region LIKE '%asia-southeast1%' THEN 'Singapore'
        WHEN region LIKE '%asia-southeast2%' THEN 'Indonesia'
        WHEN region LIKE '%asia-east1%' THEN 'Taiwan'
        WHEN region LIKE '%asia-east2%' THEN 'Hong Kong'
        WHEN region LIKE '%asia-south%' THEN 'India'
        WHEN region LIKE '%australia%' THEN 'Australia'
        WHEN region LIKE '%europe-central2%' THEN 'Poland'
        WHEN region LIKE '%europe-north1%' THEN 'Finland'
        WHEN region LIKE '%europe-southwest1%' THEN 'Spain'
        WHEN region LIKE '%europe-west1%' THEN 'Belgium'
        WHEN region LIKE '%europe-west2%' THEN 'United Kingdom'
        WHEN region LIKE '%europe-west3%' THEN 'Germany'
        WHEN region LIKE '%europe-west4%' THEN 'Netherlands'
        WHEN region LIKE '%europe-west6%' THEN 'Switzerland'
        WHEN region LIKE '%europe-west8%' THEN 'Italy'
        WHEN region LIKE '%europe-west9%' THEN 'France'
        WHEN region LIKE '%europe-west10%' THEN 'Germany'
        WHEN region LIKE '%europe-west12%' THEN 'Italy'
        WHEN region LIKE '%northamerica%' THEN 'Canada'
        WHEN region LIKE '%southamerica-east%' THEN 'Brazil'
        WHEN region LIKE '%southamerica-west%' THEN 'Chile'
        WHEN region LIKE '%me-central1%' THEN 'Qatar'
        WHEN region LIKE '%me-central2%' THEN 'Saudi Arabia'
        WHEN region LIKE '%me-west%' THEN 'Israel'
        WHEN region LIKE '%africa-south%' THEN 'South Africa'
        WHEN region LIKE '%us-%' THEN 'United States'
        ELSE 'OTHER'
      END as location
      FROM google.compute.subnetworks
      where project = 'stackql-demo'
      ;
      create view google_blob_storage as
      select 
      name, 
      id, 
      location, 
      case when encryption is null then 'N' else 'Y' end as is_encrypted  
      from google.storage.buckets 
      where project = 'stackql-demo'
      ;
      create view google_block_storage as
      select 
      name, 
      sizeGb, 
      case when region is null then zone end as location, 
      case when diskEncryptionKey is null then 'N' else 'Y' end as is_encrypted 
      from google.compute.disks 
      where project = 'stackql-demo'
      ;

superset:
  image:
    tag: latest
      
  configOverrides:
    public_role: |
      PUBLIC_ROLE_LIKE = "Gamma"
    unsafe_dc: |
      PREVENT_UNSAFE_DB_CONNECTIONS = False
    # Essential for automated API provisioning
    # TODO: orchestrate workloads securely
    csrf_disable: |
      WTF_CSRF_ENABLED = False

  init:
    loadExamples: false
    initscript: |
      #!/bin/sh
      set -eu
      echo "Upgrading DB schema..."
      superset db upgrade
      echo "Initializing roles..."
      superset init
      {{ if .Values.init.createAdmin }}
      echo "Creating admin user..."
      superset fab create-admin \
                      --username {{ .Values.init.adminUser.username }} \
                      --firstname {{ .Values.init.adminUser.firstname }} \
                      --lastname {{ .Values.init.adminUser.lastname }} \
                      --email {{ .Values.init.adminUser.email }} \
                      --password {{ .Values.init.adminUser.password }} \
                      || true
      {{- end }}
      {{- range .Values.init.dbConnections }}
      superset set_database_uri -d {{ .name | quote }} -u  {{ .uri | quote }}
      {{- end }}  
      {{ if .Values.init.loadExamples }}
      echo "Loading examples..."
      superset load_examples
      {{- end }}
      if [ -f "{{ .Values.extraConfigMountPath }}/import_datasources.yaml" ]; then
        echo "Importing database connections.... "
        superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml
      fi

primer:
  enabled: true
  dashboardAPI:
    host: v1-superset
    port: "8088"
    protocol: http
    waitForAPITimeout: 180s
  resourcesConfigSecrets:
    charts.json.jinja: |
      [
        {% if 'manual_dataset' in created_datasets and 'ops' in created_dashboards %}
        {
            "dashboards": [  {{ created_dashboards['ops']['id'] }} ],
            "datasource_id": {{ created_datasets['manual_dataset']['id'] }},
            "datasource_type": "table",
            "description": "string",
            "external_url": "string",
            "is_managed_externally": true,
            "owners": [
                {{ user_id }}
            ],
            "params": "{\"datasource\":\"{{ created_datasets['manual_dataset']['id'] }}__table\",\"viz_type\":\"pie\",\"groupby\":[\"type\"],\"metric\":{\"expressionType\":\"SIMPLE\",\"column\":{\"advanced_data_type\":null,\"certification_details\":null,\"certified_by\":null,\"column_name\":\"name\",\"description\":null,\"expression\":null,\"filterable\":true,\"groupby\":true,\"is_certified\":false,\"is_dttm\":false,\"python_date_format\":null,\"type\":\"STRING\",\"type_generic\":1,\"verbose_name\":null,\"warning_markdown\":null},\"aggregate\":\"COUNT\",\"sqlExpression\":null,\"datasourceWarning\":false,\"hasCustomLabel\":false,\"label\":\"COUNT(name)\",\"optionName\":\"{{ option_name_prefix }}1\"},\"adhoc_filters\":[],\"row_limit\":100,\"sort_by_metric\":true,\"color_scheme\":\"supersetColors\",\"show_labels_threshold\":5,\"show_legend\":true,\"legendType\":\"scroll\",\"legendOrientation\":\"top\",\"label_type\":\"key\",\"number_format\":\"SMART_NUMBER\",\"date_format\":\"smart_date\",\"show_labels\":true,\"labels_outside\":true,\"outerRadius\":70,\"innerRadius\":30,\"extra_form_data\":{},\"dashboards\":[ {{ created_dashboards['ops']['id'] }} ]}",
            "slice_name": "Auto Generated Machine Type Chart",
            "viz_type": "pie"
        },
        {% endif %} 
        {% if 'vms_dataset' in created_datasets and 'ops' in created_dashboards %}
        {
          "dashboards": [
                {{ created_dashboards['ops']['id'] }}
            ],
            "datasource_id": {{ created_datasets['manual_dataset']['id'] }},
            "datasource_type": "table",
            "description": "string",
            "external_url": "string",
            "is_managed_externally": true,
            "owners": [
                {{ user_id }}
            ],
          "params": "{\"datasource\":\"{{ created_datasets['manual_dataset']['id'] }}__table\",\"viz_type\":\"gauge_chart\",\"groupby\":[\"type\"],\"metric\":{\"expressionType\":\"SIMPLE\",\"column\":{\"advanced_data_type\":null,\"certification_details\":null,\"certified_by\":null,\"column_name\":\"name\",\"description\":null,\"expression\":null,\"filterable\":true,\"groupby\":true,\"id\":12,\"is_certified\":false,\"is_dttm\":false,\"python_date_format\":null,\"type\":\"STRING\",\"type_generic\":1,\"verbose_name\":null,\"warning_markdown\":null},\"aggregate\":\"COUNT\",\"sqlExpression\":null,\"datasourceWarning\":false,\"hasCustomLabel\":false,\"label\":\"COUNT(name)\",\"optionName\":\"{{ option_name_prefix }}1\"},\"adhoc_filters\":[],\"row_limit\":1000,\"start_angle\":225,\"end_angle\":-45,\"color_scheme\":\"supersetColors\",\"font_size\":15,\"number_format\":\"SMART_NUMBER\",\"value_formatter\":\"{value}\",\"show_pointer\":true,\"animation\":true,\"show_split_line\":false,\"split_number\":10,\"show_progress\":true,\"overlap\":false,\"round_cap\":true,\"extra_form_data\":{},\"dashboards\":[ {{ created_dashboards['ops']['id'] }} ]}",
          "slice_name": "Machine Gauge",
          "viz_type": "gauge_chart"
        },
        {% endif %} 
        {% if 'block_storage_dataset' in created_datasets and 'ops' in created_dashboards %}
        {
          "dashboards": [
                  {{ created_dashboards['ops']['id'] }}
              ],
              "datasource_id": {{ created_datasets['block_storage_dataset']['id'] }},
              "datasource_type": "table",
              "description": "string",
              "external_url": "string",
              "is_managed_externally": true,
              "owners": [
                  {{ user_id }}
              ],
          "params": "{\"datasource\":\"{{ created_datasets['block_storage_dataset']['id'] }}__table\",\"viz_type\":\"echarts_timeseries_bar\",\"x_axis\":\"is_encrypted\",\"time_grain_sqla\":\"P1D\",\"x_axis_sort_asc\":true,\"x_axis_sort_series\":\"name\",\"x_axis_sort_series_ascending\":true,\"metrics\":[{\"expressionType\":\"SIMPLE\",\"column\":{\"advanced_data_type\":null,\"certification_details\":null,\"certified_by\":null,\"column_name\":\"name\",\"description\":null,\"expression\":null,\"filterable\":true,\"groupby\":true,\"id\":13,\"is_certified\":false,\"is_dttm\":false,\"python_date_format\":null,\"type\":\"STRING\",\"type_generic\":1,\"verbose_name\":null,\"warning_markdown\":null},\"aggregate\":\"COUNT\",\"sqlExpression\":null,\"datasourceWarning\":false,\"hasCustomLabel\":false,\"label\":\"COUNT(name)\",\"optionName\":\"{{ option_name_prefix }}2\"}],\"groupby\":[],\"adhoc_filters\":[],\"order_desc\":true,\"row_limit\":1000,\"truncate_metric\":true,\"show_empty_columns\":true,\"comparison_type\":\"values\",\"annotation_layers\":[],\"forecastPeriods\":10,\"forecastInterval\":0.8,\"orientation\":\"vertical\",\"x_axis_title_margin\":15,\"y_axis_title_margin\":15,\"y_axis_title_position\":\"Left\",\"sort_series_type\":\"sum\",\"color_scheme\":\"supersetColors\",\"only_total\":true,\"show_legend\":true,\"legendType\":\"scroll\",\"legendOrientation\":\"top\",\"x_axis_time_format\":\"smart_date\",\"y_axis_format\":\"SMART_NUMBER\",\"y_axis_bounds\":[null,null],\"rich_tooltip\":true,\"tooltipTimeFormat\":\"smart_date\",\"extra_form_data\":{},\"dashboards\":[ {{ created_dashboards['ops']['id'] }} ]}",
          "slice_name": "Block Storage",
          "viz_type": "echarts_timeseries_bar"
          },
          {% endif %} 
          {% if 'blob_storage_dataset' in created_datasets and 'ops' in created_dashboards %}
          {
          "dashboards": [
                  {{ created_dashboards['ops']['id'] }}
              ],
              "datasource_id": {{ created_datasets['blob_storage_dataset']['id'] }},
              "datasource_type": "table",
              "description": "string",
              "external_url": "string",
              "is_managed_externally": true,
              "owners": [
                  {{ user_id }}
              ],
          "params": "{\"datasource\":\"{{ created_datasets['blob_storage_dataset']['id'] }}__table\",\"viz_type\":\"echarts_timeseries_bar\",\"x_axis\":\"is_encrypted\",\"time_grain_sqla\":\"P1D\",\"x_axis_sort_asc\":true,\"x_axis_sort_series\":\"name\",\"x_axis_sort_series_ascending\":true,\"metrics\":[{\"expressionType\":\"SIMPLE\",\"column\":{\"advanced_data_type\":null,\"certification_details\":null,\"certified_by\":null,\"column_name\":\"name\",\"description\":null,\"expression\":null,\"filterable\":true,\"groupby\":true,\"id\":17,\"is_certified\":false,\"is_dttm\":false,\"python_date_format\":null,\"type\":\"STRING\",\"type_generic\":1,\"verbose_name\":null,\"warning_markdown\":null},\"aggregate\":\"COUNT\",\"sqlExpression\":null,\"datasourceWarning\":false,\"hasCustomLabel\":false,\"label\":\"COUNT(name)\",\"optionName\":\"{{ option_name_prefix }}4\"}],\"groupby\":[],\"adhoc_filters\":[],\"order_desc\":true,\"row_limit\":1000,\"truncate_metric\":true,\"show_empty_columns\":true,\"comparison_type\":\"values\",\"annotation_layers\":[],\"forecastPeriods\":10,\"forecastInterval\":0.8,\"orientation\":\"vertical\",\"x_axis_title_margin\":15,\"y_axis_title_margin\":15,\"y_axis_title_position\":\"Left\",\"sort_series_type\":\"sum\",\"color_scheme\":\"d3Category10\",\"show_value\":false,\"only_total\":true,\"show_legend\":true,\"legendType\":\"scroll\",\"legendOrientation\":\"top\",\"x_axis_time_format\":\"smart_date\",\"y_axis_format\":\"SMART_NUMBER\",\"y_axis_bounds\":[null,null],\"rich_tooltip\":true,\"tooltipTimeFormat\":\"smart_date\",\"extra_form_data\":{},\"dashboards\":[ {{ created_dashboards['ops']['id'] }} ]}",
          "slice_name": "Blob Storage",
          "viz_type": "echarts_timeseries_bar"
          },
          {% endif %}
          {% if 'subnet_distribution_dataset' in created_datasets and 'ops' in created_dashboards %}
          {
          "dashboards": [
                  {{ created_dashboards['ops']['id'] }}
              ],
              "datasource_id": {{ created_datasets['subnet_distribution_dataset']['id'] }},
              "datasource_type": "table",
              "description": "string",
              "external_url": "string",
              "is_managed_externally": true,
              "owners": [
                  {{ user_id }}
              ],
          "params": "{\"datasource\":\"{{ created_datasets['subnet_distribution_dataset']['id'] }}__table\",\"viz_type\":\"world_map\",\"entity\":\"location\",\"country_fieldtype\":\"name\",\"metric\":{\"expressionType\":\"SIMPLE\",\"column\":{\"advanced_data_type\":null,\"certification_details\":null,\"certified_by\":null,\"column_name\":\"name\",\"description\":null,\"expression\":null,\"filterable\":true,\"groupby\":true,\"id\":10,\"is_certified\":false,\"is_dttm\":false,\"python_date_format\":null,\"type\":\"STRING\",\"type_generic\":1,\"verbose_name\":null,\"warning_markdown\":null},\"aggregate\":\"COUNT\",\"sqlExpression\":null,\"datasourceWarning\":false,\"hasCustomLabel\":false,\"label\":\"COUNT(name)\",\"optionName\":\"{{ option_name_prefix }}2\"},\"adhoc_filters\":[],\"row_limit\":1000,\"max_bubble_size\":\"25\",\"color_picker\":{\"r\":0,\"g\":122,\"b\":135,\"a\":1},\"color_by\":\"metric\",\"linear_color_scheme\":\"superset_seq_2\",\"color_scheme\":\"supersetColors\",\"y_axis_format\":\"SMART_NUMBER\",\"extra_form_data\":{},\"dashboards\":[ {{ created_dashboards['ops']['id'] }} ]}",
          "slice_name": "Subnet Locations",
          "viz_type": "world_map"
          }
          {% endif %} 
      ]
    dashboards.json.jinja: |
      {
          "ops": {
              "dashboard_title": "Auto Generated Ops Dashboard",
              "is_managed_externally": true,
              "owners": [
                  {{ user_id }}
              ],
              "published": true,
              "roles": []
          },
          "iam": {
              "dashboard_title": "Auto Generated IAM Dashboard",
              "is_managed_externally": true,
              "owners": [
                  {{ user_id }}
              ],
              "published": true,
              "roles": []
          }
      }
    datasets.json.jinja: |
      {
          "manual_dataset": {
              "always_filter_main_dttm": false,
              "database": {{ stackql_db_id }},
              "normalize_columns": false,
              "owners": [
                  {{ user_id }}
              ],
              "sql": "select name, split_part(split_part(machineType, '/', 11), '-', 2) as type,  json_extract_path_text(json_extract_path_text(networkInterfaces, '0'), 'networkIP') as ipAddress from google.compute.instances  where project = 'stackql-demo' and zone = 'australia-southeast1-a';",
              "table_name": "manual_dataset"
          },
          "vms_dataset": {
              "always_filter_main_dttm": false,
              "database": {{ stackql_db_id }},
              "normalize_columns": false,
              "owners": [
                  {{ user_id }}
              ],
              "sql": "select * from cross_cloud_vms;",
              "table_name": "vms_dataset"
          },
          "static_dummy_dataset": {
              "always_filter_main_dttm": false,
              "database": {{ stackql_db_id }},
              "normalize_columns": false,
              "owners": [
                  {{ user_id }}
              ],
              "sql": "select 'Australia' as nation, 55 as machine_count;",
              "table_name": "static_dummy_dataset"
          },
          "block_storage_dataset": {
              "always_filter_main_dttm": false,
              "database": {{ stackql_db_id }},
              "normalize_columns": false,
              "owners": [
                  {{ user_id }}
              ],
              "sql": "SELECT * from google_block_storage;",
              "table_name": "block_storage_dataset"
          },
          "blob_storage_dataset": {
              "always_filter_main_dttm": false,
              "database": {{ stackql_db_id }},
              "normalize_columns": false,
              "owners": [
                  {{ user_id }}
              ],
              "sql": "SELECT * from google_blob_storage;",
              "table_name": "blob_storage_dataset"
          },
          "subnet_distribution_dataset": {
              "always_filter_main_dttm": false,
              "database": {{ stackql_db_id }},
              "normalize_columns": false,
              "owners": [
                  {{ user_id }}
              ],
              "sql": "SELECT * from google_subnet_locations;",
              "table_name": "subnet_distribution_dataset"
          },
          "celeb_contribution_dataset": {
              "always_filter_main_dttm": false,
              "database": {{ stackql_db_id }},
              "normalize_columns": false,
              "owners": [
                  {{ user_id }}
              ],
              "sql": "SELECT * from org_celeb_contributors;",
              "table_name": "celeb_contribution_dataset"
          }
      } 