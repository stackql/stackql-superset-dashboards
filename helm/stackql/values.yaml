#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Default values for stackql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# A README is automatically generated from this file to document it, using helm-docs (see https://github.com/norwoodj/helm-docs)
# To update it, install helm-docs and run helm-docs from the root of this chart

# -- User ID directive. This user must have enough permissions to run the bootstrap script
# Running containers as root is not recommended in production. Change this to another UID - e.g. 1000 to be more secure
runAsUser: 0

providerRegistry:
  url: "https://registry.stackql.app/providers"

# serviceAccountName: stackql
serviceAccount:
  # -- Create custom service account for stackql. If create: true and name is not provided, `stackql.fullname` will be used.
  create: false
  annotations: {}

# -- Install additional packages and do any other bootstrap configuration in this script
# For production clusters it's recommended to build own image with this step done in CI
# @default -- see `values.yaml`
bootstrapScript: |
  #!/bin/bash
  if [ ! -f ~/bootstrap ]; then echo "Running stackql with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi

# -- The name of the secret which we will use to generate a stackql_config.py file
# Note: this secret must have the key stackql_config.py in it and can include other files as well
configFromSecret: '{{ template "stackql.fullname" . }}-config'

stackqlSqlFromSecret: '{{ template "stackql.fullname" . }}-stackql-sql-init-scripts-config'

# -- The name of the secret which we will use to populate env vars in deployed pods
# This can be useful for secret keys, etc.
envFromSecret: '{{ template "stackql.fullname" . }}-env'
# -- This can be a list of templated strings
envFromSecrets: []

# -- Extra environment variables that will be passed into pods
extraEnv: {}
  # Different gunicorn settings, refer to the gunicorn documentation
  # https://docs.gunicorn.org/en/stable/settings.html#
  # These variables are used as Flags at the gunicorn startup
  # https://github.com/apache/stackql/blob/master/docker/run-server.sh#L22
  # Extend timeout to allow long running queries.
  # GUNICORN_TIMEOUT: 300
  # Increase the gunicorn worker amount, can improve performance drastically
  # See: https://docs.gunicorn.org/en/stable/design.html#how-many-workers
  # SERVER_WORKER_AMOUNT: 4
  # WORKER_MAX_REQUESTS: 0
  # WORKER_MAX_REQUESTS_JITTER: 0
  # SERVER_THREADS_AMOUNT: 20
  # GUNICORN_KEEPALIVE: 2
  # SERVER_LIMIT_REQUEST_LINE: 0
  # SERVER_LIMIT_REQUEST_FIELD_SIZE: 0

  # OAUTH_HOME_DOMAIN: ..
  # # If a whitelist is not set, any address that can use your OAuth2 endpoint will be able to login.
  # #   this includes any random Gmail address if your OAuth2 Web App is set to External.
  # OAUTH_WHITELIST_REGEX: ...

# -- Extra environment variables in RAW format that will be passed into pods
extraEnvRaw: []
  # Load DB password from other secret (e.g. for zalando operator)
  # - name: DB_PASS
  #   valueFrom:
  #     secretKeyRef:
  #       name: stackql.stackql-postgres.credentials.postgresql.acid.zalan.do
  #       key: password

# -- Extra environment variables to pass as secrets
extraSecretEnv: {}
  # MAPBOX_API_KEY: ...
  # # Google API Keys: https://console.cloud.google.com/apis/credentials
  # GOOGLE_KEY: ...
  # GOOGLE_SECRET: ...

# -- Extra files to mount on `/opt/stackql/extraConfig`
extraConfigs: {}
  # import_datasources.yaml: |
  #     databases:
  #     - allow_file_upload: true
  #       allow_ctas: true
  #       allow_cvas: true
  #       database_name: example-db
  #       extra: "{\r\n    \"metadata_params\": {},\r\n    \"engine_params\": {},\r\n    \"\
  #         metadata_cache_timeout\": {},\r\n    \"schemas_allowed_for_file_upload\": []\r\n\
  #         }"
  #       sqlalchemy_uri: example://example-db.local
  #       tables: []

# -- Extra files to mount on `/opt/stackql/config` as secrets
extraSecrets:
  google-credentials.json: '{}'  # Substitute your Google credentials here

startupSQLScripts:
  01-setup-stackql.sql: |
    registry pull google; 
    registry pull github; 
    registry pull azure; 
    registry pull digitalocean; 
    registry pull okta; 
    registry pull aws; 
    registry pull k8s;
    registry pull googleadmin;

extraVolumes: []
  # - name: customConfig
  #   configMap:
  #     name: '{{ template "stackql.fullname" . }}-custom-config'
  # - name: additionalSecret
  #   secret:
  #     secretName: my-secret
  #     defaultMode: 0600

extraVolumeMounts: []
  # - name: customConfig
  #   mountPath: /mnt/config
  #   readOnly: true
  # - name: additionalSecret:
  #   mountPath: /mnt/secret

# -- A dictionary of overrides to append at the end of stackql_config.py - the name does not matter
# WARNING: the order is not guaranteed
# Files can be passed as helm --set-file configOverrides.my-override=my-file.py
configOverrides: {}
  # extend_timeout: |
  #    # Extend timeout to allow long running queries.
  #    STACKQL_WEBSERVER_TIMEOUT = ...
  # enable_oauth: |
  #   from flask_appbuilder.security.manager import (AUTH_DB, AUTH_OAUTH)
  #   AUTH_TYPE = AUTH_OAUTH
  #   OAUTH_PROVIDERS = [
  #       {
  #           "name": "google",
  #           "whitelist": [ os.getenv("OAUTH_WHITELIST_REGEX", "") ],
  #           "icon": "fa-google",
  #           "token_key": "access_token",
  #           "remote_app": {
  #               "client_id": os.environ.get("GOOGLE_KEY"),
  #               "client_secret": os.environ.get("GOOGLE_SECRET"),
  #               "api_base_url": "https://www.googleapis.com/oauth2/v2/",
  #               "client_kwargs": {"scope": "email profile"},
  #               "request_token_url": None,
  #               "access_token_url": "https://accounts.google.com/o/oauth2/token",
  #               "authorize_url": "https://accounts.google.com/o/oauth2/auth",
  #               "authorize_params": {"hd": os.getenv("OAUTH_HOME_DOMAIN", "")}
  #           }
  #       }
  #   ]
  #   # Map Authlib roles to stackql roles
  #   AUTH_ROLE_ADMIN = 'Admin'
  #   AUTH_ROLE_PUBLIC = 'Public'
  #   # Will allow user self registration, allowing to create Flask users from Authorized User
  #   AUTH_USER_REGISTRATION = True
  #   # The default user self registration role
  #   AUTH_USER_REGISTRATION_ROLE = "Admin"
  # secret: |
  #   # Generate your own secret key for encryption. Use openssl rand -base64 42 to generate a good key
  #   SECRET_KEY = 'YOUR_OWN_RANDOM_GENERATED_SECRET_KEY'

# -- Same as above but the values are files
configOverridesFiles: {}
  # extend_timeout: extend_timeout.py
  # enable_oauth: enable_oauth.py

configMountPath: "/opt/stackql/config"

stackqlSqlInitScriptsMountPath: "/opt/stackql/sqlInitScripts"

extraConfigMountPath: "/opt/stackql/extraConfig"

registryMountPath: "/opt/stackql/registry"

image:
  repository: stackql/stackql
  tag: "latest"
  pullPolicy: IfNotPresent

imagePullSecrets: []

initImage:
  repository: jwilder/dockerize
  tag: latest
  pullPolicy: IfNotPresent

x-initDbScripts: &initDbScripts
  01_setup.sql: |
    -- 'C' collation ensures parity with sqlite text ordering
    CREATE database "stackql" LC_COLLATE 'C' LC_CTYPE 'C' template template0;

    CREATE user stackql with password 'stackql';

    CREATE user stackql_intel with password 'stackql';

    CREATE user stackql_ops with password 'stackql';

    GRANT ALL PRIVILEGES on DATABASE stackql to stackql;

    \connect stackql;

    CREATE schema stackql_raw;

    CREATE schema stackql_control;

    CREATE schema stackql_intel;

    CREATE schema stackql_ops;

    GRANT ALL PRIVILEGES on SCHEMA stackql_raw to stackql;

    GRANT ALL PRIVILEGES on SCHEMA stackql_control to stackql;

    GRANT ALL PRIVILEGES on SCHEMA stackql_intel to stackql;

    GRANT ALL PRIVILEGES on SCHEMA stackql_ops to stackql;

    GRANT ALL PRIVILEGES on SCHEMA stackql_intel to stackql_intel;

    GRANT ALL PRIVILEGES on SCHEMA stackql_ops to stackql_ops;

service:
  type: ClusterIP
  port: '7432'
  annotations:
    {}
    # cloud.google.com/load-balancer-type: "Internal"
  loadBalancerIP: null
  nodePort:
    # -- (int)
    postgresWire: null

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # The limits below will apply to all stackql components. To set individual resource limitations refer to the pod specific values below.
  # The pod specific values will overwrite anything that is set here.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Custom hostAliases for all stackql pods
## https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/
hostAliases: []
# - hostnames:
#   - nodns.my.lan
#   ip: 18.27.36.45

# stackql node configuration
stackqlNode:
  replicaCount: 1
  # -- Startup command
  # @default -- See `values.yaml`
  command:
    - stackql 
    - --loglevel=DEBUG 
    - '--auth={ "google": { "credentialsfilepath": "{{- tpl .Values.configMountPath . }}/google-credentials.json", "type": "service_account" }, "googleadmin": { "credentialsfilepath": "{{- tpl .Values.configMountPath . }}/googleadmin-credentials.json", "type": "service_account" }, "okta": { "credentialsenvvar": "OKTA_SECRET_KEY", "type": "api_key", "valuePrefix": "SSWS " }, "aws": { "type": "aws_signing_v4", "credentialsenvvar": "AWS_SECRET_ACCESS_KEY", "keyIDenvvar": "AWS_ACCESS_KEY_ID" }, "k8s": { "credentialsenvvar": "STACKQL_K8S_TOKEN", "type": "api_key" } }'
    - '--registry={ "url": "{{ .Values.providerRegistry.url }}", "localDocRoot": "{{ .Values.registryMountPath }}" }'
    - '--sqlBackend={ "dbEngine": "postgres_tcp", "sqlDialect": "postgres", "dsn": "postgres://{{ tpl .Values.stackqlNode.connections.db_user . }}:{{ tpl .Values.stackqlNode.connections.db_pass . }}@{{ tpl .Values.stackqlNode.connections.db_host . }}:{{ tpl .Values.stackqlNode.connections.db_port . }}/{{ tpl .Values.stackqlNode.connections.db_name . }}" }'
    - '--dbInternal={ "tableRegex": "(?i)^(?:public\\\\.)?(?:pg_.*|current_schema|stackql_intel)" }'
    - --pgsrv.address=0.0.0.0
    - --pgsrv.port={{ tpl .Values.service.port . }}
    - srv
  connections:
    # You need to change below configuration incase bringing own PostgresSQL instance and also set postgresql.enabled:false
    db_host: '{{ template "stackql.fullname" . }}-postgresql'
    db_port: "5432"
    db_user: stackql
    db_pass: stackql
    db_name: stackql
  env: {}
  # -- If true, forces deployment to reload on each upgrade
  forceReload: false
  # -- Init containers
  # @default -- a container waiting for postgres
  initContainers:
    - name: wait-for-postgres
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: "{{ tpl .Values.envFromSecret . }}"
      command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
    - name: stackql-setup
      image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
      imagePullPolicy: "{{ .Values.image.pullPolicy }}"
      volumeMounts:
        - name: stackql-registry
          mountPath: "{{ tpl .Values.registryMountPath . }}"
        - name: stackql-config
          mountPath: "{{ tpl .Values.configMountPath . }}"
          readOnly: true
        - name: stackql-sql-init-scripts
          mountPath: "{{ tpl .Values.stackqlSqlInitScriptsMountPath . }}"
          readOnly: true
      command:
          - stackql 
          - --loglevel=DEBUG
          - '--registry={ "url": "{{ .Values.providerRegistry.url }}" , "localDocRoot": "{{ .Values.registryMountPath }}" }'
          - '--sqlBackend={ "dbEngine": "postgres_tcp", "sqlDialect": "postgres", "dsn": "postgres://{{ tpl .Values.stackqlNode.connections.db_user . }}:{{ tpl .Values.stackqlNode.connections.db_pass . }}@{{ tpl .Values.stackqlNode.connections.db_host . }}:{{ tpl .Values.stackqlNode.connections.db_port . }}/{{ tpl .Values.stackqlNode.connections.db_name . }}" }'
          - exec
          - '--infile={{ tpl .Values.stackqlSqlInitScriptsMountPath . }}/01-setup-stackql.sql'

  # -- Launch additional containers into stackqlNode pod
  extraContainers: []
  # -- Annotations to be added to stackqlNode deployment
  deploymentAnnotations: {}
  # -- Labels to be added to stackqlNode deployment
  deploymentLabels: {}
  # -- Affinity to be added to stackqlNode deployment
  affinity: {}
  # -- TopologySpreadConstrains to be added to stackqlNode deployments
  topologySpreadConstraints: []
  # -- Annotations to be added to stackqlNode pods
  podAnnotations: {}
  # -- Labels to be added to stackqlNode pods
  podLabels: {}
  startupProbe: {}
    # httpGet:
    #   path: /health
    #   port: http
    # initialDelaySeconds: 15
    # timeoutSeconds: 1
    # failureThreshold: 60
    # periodSeconds: 5
    # successThreshold: 1
  livenessProbe: {}
    # httpGet:
    #   path: /health
    #   port: http
    # initialDelaySeconds: 15
    # timeoutSeconds: 1
    # failureThreshold: 3
    # periodSeconds: 15
    # successThreshold: 1
  readinessProbe: {}
    # httpGet:
    #   path: /health
    #   port: http
    # initialDelaySeconds: 15
    # timeoutSeconds: 1
    # failureThreshold: 3
    # periodSeconds: 15
    # successThreshold: 1
  # -- Resource settings for the stackqlNode pods - these settings overwrite might existing values from the global resources object defined above.
  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  podSecurityContext: {}
  containerSecurityContext: {}
  strategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

init:
  # Configure resources
  # Warning: fab command consumes a lot of ram and can
  # cause the process to be killed due to OOM if it exceeds limit
  # Make sure you are giving a strong password for the admin user creation( else make sure you are changing after setup)
  # Also change the admin email to your own custom email.
  resources: {}
    # limits:
    #   cpu:
    #   memory:
    # requests:
    #   cpu:
    #   memory:
  # -- Command
  # @default -- a `stackql_init.sh` command
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/stackql_init.sh"
  enabled: true
  helmHook: true
  loadExamples: false
  createAdmin: true
  adminUser:
    username: admin
    firstname: Stackql
    lastname: Admin
    email: admin@stackql.com
    password: admin
  # -- List of initContainers
  # @default -- a container waiting for postgres
  initContainers:
    - name: wait-for-db
      image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
      imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
      envFrom:
        - secretRef:
            name: "{{ tpl .Values.envFromSecret . }}"
      command:
        - /bin/sh
        - -c
        - |
          if [ "${WAIT_FOR_DB}" != "false" ]; then 
            dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
          fi;
  # -- A stackql init script
  # @default -- a script to create admin user and initailize roles
  initscript: |-
    #!/bin/sh
    set -eu
    echo "stackql setup... NOP placeholder..."
    exit 0;
  

  ## Annotations to be added to init job pods
  podAnnotations: {}
  podSecurityContext: {}
  containerSecurityContext: {}
  ## Tolerations to be added to init job pods
  tolerations: []
  ## Affinity to be added to init job pods
  affinity: {}
  # -- TopologySpreadConstrains to be added to init job
  topologySpreadConstraints: []

# -- Configuration values for the postgresql dependency.
# ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
# @default -- see `values.yaml`
postgresql:
  ##
  ## Use the PostgreSQL chart dependency.
  ## Set to false if bringing your own PostgreSQL.
  enabled: true
  nameOverride: stackql-postgresql

  ## Authentication parameters
  auth:
    ## The name of an existing secret that contains the postgres password.
    existingSecret:
    ## PostgreSQL name for a custom user to create
    username: stackql
    ## PostgreSQL password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
    password: stackql
    ## PostgreSQL name for a custom database to create
    database: stackql

  image:
    tag: "14.6.0-debian-11-r13"

  ## PostgreSQL Primary parameters
  primary:
    initdb:
      scripts: *initDbScripts

    ##
    ## Persistent Volume Storage configuration.
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
    persistence:
      ##
      ## Enable PostgreSQL persistence using Persistent Volume Claims.
      enabled: true
      ##
      ## Persistent class
      # storageClass: classname
      ##
      ## Access modes:
      accessModes:
        - ReadWriteOnce
    ## PostgreSQL port
    service:
      ports:
        postgresql: "5432"

nodeSelector: {}

tolerations: []

affinity: {}

# -- TopologySpreadConstrains to be added to all deployments
topologySpreadConstraints: []

waitForDb: true


